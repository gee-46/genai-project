import React, { useState } from 'react';
import { Calendar, TrendingUp, Brain, Lightbulb, ChevronLeft, ChevronRight } from 'lucide-react';

interface MoodTrackerProps {
  language: string;
}

interface MoodEntry {
  date: string;
  mood: number;
  energy: number;
  stress: number;
  notes?: string;
}

interface AIInsight {
  type: 'pattern' | 'suggestion' | 'achievement';
  title: string;
  description: string;
  icon: string;
}

const MoodTracker: React.FC<MoodTrackerProps> = ({ language }) => {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [currentMonth, setCurrentMonth] = useState(new Date());

  const content = {
    en: {
      title: "Daily Mood Tracker",
      subtitle: "Track your emotional journey with AI insights",
      mood: "Mood",
      energy: "Energy",
      stress: "Stress",
      notes: "Notes",
      aiInsights: "AI Insights",
      patterns: "Patterns Detected",
      suggestions: "Personalized Suggestions",
      achievements: "Recent Achievements",
      addEntry: "Add Today's Entry",
      viewInsights: "View Detailed Insights",
      moodLabels: ["Very Low", "Low", "Neutral", "Good", "Excellent"],
      energyLabels: ["Exhausted", "Tired", "Moderate", "Energetic", "Very Energetic"],
      stressLabels: ["Very High", "High", "Moderate", "Low", "Very Low"],
      placeholder: "How are you feeling today? Any specific thoughts or events?",
      save: "Save Entry"
    },
    hi: {
      title: "दैनिक मूड ट्रैकर",
      subtitle: "AI अंतर्दृष्टि के साथ अपनी भावनात्मक यात्रा को ट्रैक करें",
      mood: "मूड",
      energy: "ऊर्जा",
      stress: "तनाव",
      notes: "नोट्स",
      aiInsights: "AI अंतर्दृष्टि",
      patterns: "पैटर्न का पता चला",
      suggestions: "व्यक्तिगत सुझाव",
      achievements: "हाल की उपलब्धियां",
      addEntry: "आज की एंट्री जोड़ें",
      viewInsights: "विस्तृत अंतर्दृष्टि देखें",
      moodLabels: ["बहुत कम", "कम", "तटस्थ", "अच्छा", "उत्कृष्ट"],
      energyLabels: ["थका हुआ", "थका", "मध्यम", "ऊर्जावान", "बहुत ऊर्जावान"],
      stressLabels: ["बहुत अधिक", "अधिक", "मध्यम", "कम", "बहुत कम"],
      placeholder: "आज आप कैसा महसूस कर रहे हैं? कोई विशिष्ट विचार या घटनाएं?",
      save: "एंट्री सेव करें"
    }
  };

  const t = content[language as keyof typeof content];

  // Mock data for demonstration
  const moodData: MoodEntry[] = [
    { date: '2024-01-15', mood: 4, energy: 3, stress: 2, notes: 'Great day at work!' },
    { date: '2024-01-14', mood: 3, energy: 4, stress: 3, notes: 'Feeling productive' },
    { date: '2024-01-13', mood: 2, energy: 2, stress: 4, notes: 'Stressful day with deadlines' },
    { date: '2024-01-12', mood: 4, energy: 4, stress: 1, notes: 'Relaxing weekend' },
    { date: '2024-01-11', mood: 3, energy: 3, stress: 2, notes: 'Balanced day' },
  ];

  const aiInsights: AIInsight[] = [
    {
      type: 'pattern',
      title: language === 'en' ? 'Weekly Pattern Detected' : 'साप्ताहिक पैटर्न का पता चला',
      description: language === 'en' 
        ? 'Your mood tends to improve on weekends. Consider incorporating weekend activities into weekdays.'
        : 'आपका मूड सप्ताहांत में बेहतर होता है। सप्ताह के दिनों में सप्ताहांत की गतिविधियों को शामिल करने पर विचार करें।',
      icon: '📊'
    },
    {
      type: 'suggestion',
      title: language === 'en' ? 'Stress Management Tip' : 'तनाव प्रबंधन टिप',
      description: language === 'en'
        ? 'Try a 5-minute breathing exercise when stress levels are high. It can help reduce cortisol levels.'
        : 'जब तनाव का स्तर अधिक हो तो 5-मिनट की सांस की एक्सरसाइज करें। यह कॉर्टिसोल के स्तर को कम करने में मदद कर सकता है।',
      icon: '🧘'
    },
    {
      type: 'achievement',
      title: language === 'en' ? 'Consistency Achievement' : 'निरंतरता की उपलब्धि',
      description: language === 'en'
        ? 'You\'ve tracked your mood for 7 consecutive days! This helps build self-awareness.'
        : 'आपने लगातार 7 दिनों तक अपने मूड को ट्रैक किया है! यह आत्म-जागरूकता बनाने में मदद करता है।',
      icon: '🏆'
    }
  ];

  const [currentEntry, setCurrentEntry] = useState({
    mood: 3,
    energy: 3,
    stress: 3,
    notes: ''
  });

  const getMoodColor = (value: number) => {
    const colors = ['#ef4444', '#f97316', '#eab308', '#22c55e', '#10b981'];
    return colors[value - 1] || colors[2];
  };

  const getCalendarDays = () => {
    const year = currentMonth.getFullYear();
    const month = currentMonth.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = firstDay.getDay();

    const days = [];
    
    // Add empty cells for days before the first day of the month
    for (let i = 0; i < startingDayOfWeek; i++) {
      days.push(null);
    }
    
    // Add days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(day);
    }
    
    return days;
  };

  const getMoodForDate = (day: number) => {
    const dateStr = `${currentMonth.getFullYear()}-${String(currentMonth.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    return moodData.find(entry => entry.date === dateStr);
  };

  const navigateMonth = (direction: 'prev' | 'next') => {
    setCurrentMonth(prev => {
      const newMonth = new Date(prev);
      if (direction === 'prev') {
        newMonth.setMonth(prev.getMonth() - 1);
      } else {
        newMonth.setMonth(prev.getMonth() + 1);
      }
      return newMonth;
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-cyan-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8 text-center">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">{t.title}</h1>
          <p className="text-gray-600 text-lg">{t.subtitle}</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Mood Calendar */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 mb-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900 flex items-center">
                  <Calendar className="h-5 w-5 mr-2 text-indigo-500" />
                  {currentMonth.toLocaleDateString(language === 'hi' ? 'hi-IN' : 'en-US', { 
                    month: 'long', 
                    year: 'numeric' 
                  })}
                </h2>
                <div className="flex space-x-2">
                  <button
                    onClick={() => navigateMonth('prev')}
                    className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <ChevronLeft className="h-5 w-5" />
                  </button>
                  <button
                    onClick={() => navigateMonth('next')}
                    className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <ChevronRight className="h-5 w-5" />
                  </button>
                </div>
              </div>

              {/* Calendar Grid */}
              <div className="grid grid-cols-7 gap-2 mb-4">
                {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                  <div key={day} className="text-center text-sm font-medium text-gray-500 py-2">
                    {day}
                  </div>
                ))}
                {getCalendarDays().map((day, index) => {
                  if (!day) return <div key={index} className="h-12"></div>;
                  
                  const moodEntry = getMoodForDate(day);
                  const isToday = day === new Date().getDate() && 
                                 currentMonth.getMonth() === new Date().getMonth() &&
                                 currentMonth.getFullYear() === new Date().getFullYear();
                  
                  return (
                    <div
                      key={day}
                      className={`h-12 flex items-center justify-center rounded-lg cursor-pointer transition-all ${
                        isToday ? 'ring-2 ring-indigo-500' : ''
                      } ${moodEntry ? 'hover:scale-105' : 'hover:bg-gray-100'}`}
                      style={{
                        backgroundColor: moodEntry ? `${getMoodColor(moodEntry.mood)}20` : 'transparent',
                        borderColor: moodEntry ? getMoodColor(moodEntry.mood) : 'transparent',
                        borderWidth: moodEntry ? '2px' : '0'
                      }}
                    >
                      <span className={`text-sm font-medium ${moodEntry ? 'text-gray-900' : 'text-gray-600'}`}>
                        {day}
                      </span>
                    </div>
                  );
                })}
              </div>

              {/* Mood Legend */}
              <div className="flex justify-center space-x-4 text-xs">
                {[1, 2, 3, 4, 5].map(mood => (
                  <div key={mood} className="flex items-center space-x-1">
                    <div 
                      className="w-3 h-3 rounded-full"
                      style={{ backgroundColor: getMoodColor(mood) }}
                    ></div>
                    <span className="text-gray-600">{t.moodLabels[mood - 1]}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Today's Entry */}
            <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">{t.addEntry}</h3>
              
              <div className="space-y-6">
                {/* Mood Slider */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {t.mood}: {t.moodLabels[currentEntry.mood - 1]}
                  </label>
                  <input
                    type="range"
                    min="1"
                    max="5"
                    value={currentEntry.mood}
                    onChange={(e) => setCurrentEntry(prev => ({ ...prev, mood: parseInt(e.target.value) }))}
                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                    style={{
                      background: `linear-gradient(to right, ${getMoodColor(1)} 0%, ${getMoodColor(5)} 100%)`
                    }}
                  />
                </div>

                {/* Energy Slider */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {t.energy}: {t.energyLabels[currentEntry.energy - 1]}
                  </label>
                  <input
                    type="range"
                    min="1"
                    max="5"
                    value={currentEntry.energy}
                    onChange={(e) => setCurrentEntry(prev => ({ ...prev, energy: parseInt(e.target.value) }))}
                    className="w-full h-2 bg-gradient-to-r from-red-400 to-green-400 rounded-lg appearance-none cursor-pointer"
                  />
                </div>

                {/* Stress Slider */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {t.stress}: {t.stressLabels[currentEntry.stress - 1]}
                  </label>
                  <input
                    type="range"
                    min="1"
                    max="5"
                    value={currentEntry.stress}
                    onChange={(e) => setCurrentEntry(prev => ({ ...prev, stress: parseInt(e.target.value) }))}
                    className="w-full h-2 bg-gradient-to-r from-green-400 to-red-400 rounded-lg appearance-none cursor-pointer"
                  />
                </div>

                {/* Notes */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">{t.notes}</label>
                  <textarea
                    value={currentEntry.notes}
                    onChange={(e) => setCurrentEntry(prev => ({ ...prev, notes: e.target.value }))}
                    placeholder={t.placeholder}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 resize-none"
                    rows={3}
                  />
                </div>

                <button className="w-full bg-gradient-to-r from-indigo-500 to-cyan-500 text-white py-3 px-4 rounded-lg hover:from-indigo-600 hover:to-cyan-600 transition-colors font-medium">
                  {t.save}
                </button>
              </div>
            </div>
          </div>

          {/* AI Insights Sidebar */}
          <div className="space-y-6">
            <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <Brain className="h-5 w-5 mr-2 text-purple-500" />
                {t.aiInsights}
              </h3>
              
              <div className="space-y-4">
                {aiInsights.map((insight, index) => (
                  <div
                    key={index}
                    className={`p-4 rounded-xl border-2 ${
                      insight.type === 'pattern' ? 'bg-blue-50 border-blue-200' :
                      insight.type === 'suggestion' ? 'bg-green-50 border-green-200' :
                      'bg-yellow-50 border-yellow-200'
                    }`}
                  >
                    <div className="flex items-start space-x-3">
                      <div className="text-2xl">{insight.icon}</div>
                      <div>
                        <h4 className="font-semibold text-gray-900 mb-2">{insight.title}</h4>
                        <p className="text-gray-700 text-sm">{insight.description}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Quick Stats */}
            <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <TrendingUp className="h-5 w-5 mr-2 text-green-500" />
                Weekly Trends
              </h3>
              
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Average Mood</span>
                  <div className="flex items-center space-x-2">
                    <div className="w-16 bg-gray-200 rounded-full h-2">
                      <div className="bg-green-500 h-2 rounded-full" style={{ width: '70%' }}></div>
                    </div>
                    <span className="text-sm font-medium">3.5/5</span>
                  </div>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Energy Level</span>
                  <div className="flex items-center space-x-2">
                    <div className="w-16 bg-gray-200 rounded-full h-2">
                      <div className="bg-blue-500 h-2 rounded-full" style={{ width: '60%' }}></div>
                    </div>
                    <span className="text-sm font-medium">3.0/5</span>
                  </div>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Stress Level</span>
                  <div className="flex items-center space-x-2">
                    <div className="w-16 bg-gray-200 rounded-full h-2">
                      <div className="bg-orange-500 h-2 rounded-full" style={{ width: '50%' }}></div>
                    </div>
                    <span className="text-sm font-medium">2.5/5</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MoodTracker;